FROM buildpack-deps:bionic

# avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Set up locales properly
RUN apt-get -qq update && \
    apt-get -qq install --yes --no-install-recommends locales > /dev/null && \
    apt-get -qq purge && \
    apt-get -qq clean && \
    rm -rf /var/lib/apt/lists/*

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen

RUN wget --quiet -O - https://deb.nodesource.com/gpgkey/nodesource.gpg.key |  apt-key add - && \
    DISTRO="bionic" && \
    echo "deb https://deb.nodesource.com/node_12.x $DISTRO main" >> /etc/apt/sources.list.d/nodesource.list && \
    echo "deb-src https://deb.nodesource.com/node_12.x $DISTRO main" >> /etc/apt/sources.list.d/nodesource.list && \
    curl -s https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \
    echo 'deb https://dl.yarnpkg.com/debian/ stable main' > /etc/apt/sources.list.d/yarn.list

# TODO `sudo` may be required to run the services api and supervisord
RUN apt-get -qq update && \
    apt-get -qq install --yes --no-install-recommends make build-essential libx11-dev libxkbfile-dev libsecret-1-dev pkg-config > /dev/null && \
    apt-get -qq install --yes --no-install-recommends git rsync curl vim less nodejs unzip inotify-tools supervisor sudo jq net-tools sudo yarn > /dev/null && \
    apt-get -qq purge && \
    apt-get -qq clean && \
    rm -rf /var/lib/apt/lists/*

# Install kubectl as root
# RUN curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.14.10/bin/linux/amd64/kubectl && \
#     chmod +x ./kubectl && \
#     mkdir /root/.bin && \
#     mv ./kubectl /root/.bin/kubectl

# COPY kubeconfig.yml /root/.kube/config

ARG NB_USER
ARG NB_UID

ENV APP_BASE /src
ENV NPM_DIR ${APP_BASE}/npm
ENV NPM_CONFIG_GLOBALCONFIG ${NPM_DIR}/npmrc

# must run as root
RUN npm config --global set prefix ${NPM_DIR}

# Install gcloud as root
############################################################################
# TODO - replace with more restrictive key
# COPY apt-phenomenon-243802-bbe918a2d411.json /root/apt-phenomenon-243802-bbe918a2d411.json
############################################################################

# ENV GCLOUD_SERVICE_KEY /root/apt-phenomenon-243802-bbe918a2d411.json
# ENV GOOGLE_PROJECT_ID apt-phenomenon-243802
# ENV GOOGLE_COMPUTE_ZONE us-central1-b

# RUN mkdir /root/gcloud && \
#     curl https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz | tar xvz -C /root/gcloud && \
#     /root/gcloud/google-cloud-sdk/install.sh --quiet && \
#     /root/gcloud/google-cloud-sdk/bin/gcloud auth activate-service-account notebook-container@apt-phenomenon-243802.iam.gserviceaccount.com --key-file=/root/apt-phenomenon-243802-bbe918a2d411.json --project=apt-phenomenon-243802 && \
#     # shows warning for unknown reason
#     /root/gcloud/google-cloud-sdk/bin/gcloud config set project apt-phenomenon-243802 && \
#     /root/gcloud/google-cloud-sdk/bin/gcloud config set compute/zone us-central1-b

# Install garden as root
# using a customized version
# RUN mkdir -p /root/.garden/bin && \
#     mkdir -p /tmp/garden-install

# COPY garden-v0.11.14-linux-amd64.tar.gz /tmp/garden-install/garden-v0.11.14-linux-amd64.tar.gz

# RUN cd /tmp/garden-install && \
#     tar -xzf garden-v0.11.14-linux-amd64.tar.gz && \
#     mv linux-amd64/* /root/.garden/bin/ && \
#     chown root:root -R /root/.garden

# Set up notebook user and groups
RUN groupadd \
        --gid ${NB_UID} \
        ${NB_USER} && \
    useradd \
        --comment "Notebook user" \
        --create-home \
        --gid ${NB_UID} \
        --no-log-init \
        --shell /bin/bash \
        --uid ${NB_UID} \
        ${NB_USER} && \
    # TODO the following may be required to run the services api and supervisord
    echo "Defaults secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/home/${NB_USER}\"" >> /etc/sudoers && \
    echo "Defaults env_keep += \"BINDER_REPO_URL BINDER_REQUEST CONDA_DIR CONDA_PROFILE JUPYTERHUB_USER KERNEL_PYTHON_PREFIX NB_PYTHON_PREFIX REPO_DIR\"" >> /etc/sudoers && \
    echo "${NB_USER} ALL=(ALL)  ALL" >> /etc/sudoers && \
    echo "${NB_USER} ALL=(root) NOPASSWD: /bin/bash -i python /root/europa/wsgi.py, /usr/bin/supervisord" >> /etc/sudoers

############################################################################
# TODO the following may be required to run the services api and supervisord
# TODO remove password (RyBB5bb64VMZMEbVnEmu)
RUN echo "${NB_USER}:RyBB5bb64VMZMEbVnEmu" | chpasswd
RUN usermod -aG sudo ${NB_USER}
############################################################################

ENV CONDA_DIR ${APP_BASE}/conda
ENV NB_PYTHON_PREFIX ${CONDA_DIR}/envs/notebook
ENV KERNEL_PYTHON_PREFIX ${NB_PYTHON_PREFIX}

# TODO this still applies to jovyan I think
ENV PATH ${NB_PYTHON_PREFIX}/bin:${NPM_DIR}/bin:${PATH}

# restrict access
RUN \
    # echo 'export PATH=/root/.garden/bin:/root/gcloud/google-cloud-sdk/bin:/root/.bin:$PATH' >> /root/.bashrc && \
    echo 'export PYTHONPATH=/root/europa' >> /root/.bashrc && \
    echo "export CONDA_DIR=${CONDA_DIR}" >> /root/.bashrc && \
    echo "export NB_PYTHON_PREFIX=${CONDA_DIR}/envs/notebook" >> /root/.bashrc && \
    echo "export KERNEL_PYTHON_PREFIX=${NB_PYTHON_PREFIX}" >> /root/.bashrc

# Install miniconda
# depends on: jovyan user setup
COPY conda/activate-conda.sh /etc/profile.d/activate-conda.sh
COPY conda/environment.py-3.7.frozen.yml /tmp/environment.yml
COPY conda/install-miniconda.bash /tmp/install-miniconda.bash
RUN bash /tmp/install-miniconda.bash && \
    rm /tmp/install-miniconda.bash /tmp/environment.yml
    # the following is already done in the installer
    # and getting "EnvironmentFileNotFound: '/{1}' file not found" prior to init
    # CONDA_EXE="${CONDA_DIR}/bin/conda" && \
    # $CONDA_EXE env update -p ${NB_PYTHON_PREFIX} -f "{1}" && \
    # $CONDA_EXE clean --all -f -y && \
    # $CONDA_EXE list -p ${NB_PYTHON_PREFIX}

# uses HOME or USER env vars to determine user environment to update
RUN ${CONDA_DIR}/bin/conda init bash

# https://github.com/conda/conda/issues/7980
# attempt to fix "CommandNotFoundError" when opening a JupyterLab terminal
RUN echo "export -f conda" >> /home/$NB_USER/.bashrc && \
    echo "export -f __conda_activate" >> /home/$NB_USER/.bashrc && \
    echo "export -f __conda_reactivate" >> /home/$NB_USER/.bashrc && \
    echo "export -f __conda_hashr" >> /home/$NB_USER/.bashrc && \
    echo "export -f __add_sys_prefix_to_path" >> /home/$NB_USER/.bashrc

# Must come after miniconda installation, otherwise
# "EnvironmentLocationNotFound: Not a conda environment: /src/conda/envs/notebook"
ENV CONDA_DEFAULT_ENV ${KERNEL_PYTHON_PREFIX}

# Install Europa
COPY europa/ /root/europa/
COPY start_europa.sh /root/
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
RUN mkdir -p /var/log/supervisor

# Install jupyter-server-proxy as root
# depends on: miniconda install
RUN python3 -m pip install jupyter-server-proxy

RUN mkdir -p ${NPM_DIR} && \
    chown -R ${NB_USER}:${NB_USER} ${NPM_DIR}

# Add Jupyter Notebook config
# depends on: jovyan user setup
COPY jupyter_notebook_config.py /home/$NB_USER/.jupyter/jupyter_notebook_config.py

# Install autocommit service
# depends on: jovyan user setup
COPY autocommit.sh /home/$NB_USER/autocommit.sh

# Add scripts
# depends on: jovyan user setup
COPY fetch.sh /home/$NB_USER/fetch.sh
COPY merge.sh /home/$NB_USER/merge.sh
RUN chmod +x /home/$NB_USER/fetch.sh && \
    chmod +x /home/$NB_USER/merge.sh && \
    chmod +x /home/$NB_USER/autocommit.sh

ENV USER ${NB_USER}
ENV HOME /home/${NB_USER}

# uses HOME or USER env vars to determine user environment to update
RUN ${CONDA_DIR}/bin/conda init bash

# Install Code-server
RUN echo "**** install code-server ****" && \
    # npm install -g yarn && \
    # if [ -z ${CODE_RELEASE+x} ]; then \
    #     CODE_RELEASE=$(curl -sX GET "https://api.github.com/repos/cdr/code-server/releases/latest" \
    #     | awk '/tag_name/{print $4;exit}' FS='[""]'); \
    # fi && \
    # CODE_VERSION=$(echo "$CODE_RELEASE" | awk '{print substr($1,2); }') && \
    # yarn --production global add code-server@"$CODE_VERSION" && \
    # yarn cache clean && \
    # ln -s /node_modules/.bin/code-server /usr/bin/code-server && \
    cd /opt && \
    mkdir /opt/code-server && \
    cd /opt/code-server && \
    wget -qO- https://github.com/cdr/code-server/releases/download/3.4.1/code-server-3.4.1-linux-x86_64.tar.gz | tar zxvf - --strip-components=1 && \
    echo "**** clean up ****" && \
    apt-get purge --auto-remove -y \
        build-essential \
        libx11-dev \
        libxkbfile-dev \
        libsecret-1-dev \
        pkg-config && \
    apt-get clean && \
    rm -rf \
        /tmp/* \
        /var/lib/apt/lists/* \
        /var/tmp/*

# used by kubespawner to determine which user to run the container as
# https://jupyterhub-kubespawner.readthedocs.io/en/latest/spawner.html
# "config c.KubeSpawner.uid = Union()"
# "If set to None, the user specified with the USER directive in the 
# container metadata is used."
USER ${NB_USER}

ENV PATH "/opt/code-server:/home/$NB_USER:/home/$NB_USER/node_modules/.bin:${PATH}"

RUN mkdir -p /home/$NB_USER/.config/code-server && \
    mkdir -p /home/$NB_USER/.local/share/code-server/User
COPY ./code-server/config.yaml /home/jovyan/.config/code-server/config.yaml
COPY ./code-server/User/settings.json /home/jovyan/.local/share/code-server/User/settings.json

# latest version of `ms-python.python` extension not working with
# code-server 3.4.1 (latest as of 2020-08-06)
# https://github.com/microsoft/vscode-python/issues/12465
RUN mkdir -p ~/.local/share/code-server/extensions && \
    code-server --install-extension ms-python.python@2020.5.86806 --force

# Install Elyra
RUN python3 -m pip install --upgrade elyra && \
    jupyter lab build

# Save is currently broken
# RUN jupyter labextension install jupyterlab-drawio

WORKDIR /home/$NB_USER
